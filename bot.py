import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from dotenv import load_dotenv

load_dotenv()

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

branches = [
    "–ú–∞—Ä–∫–µ—Ç", "Doner House",
    "–ö–∞–Ω—Ç–∏–Ω —Ü–µ–Ω—Ç—Ä", "Red Coffee",
    "–ö–∞–Ω—Ç–∏–Ω –ù –±–ª–æ–∫", "–ë–µ–ª–∫–∞",
    "–ö–∞–Ω—Ç–∏–Ω –°–ø–æ—Ä—Ç", "–ö–∞–Ω—Ç–∏–Ω –†–∞–∑–¥–∞—á–∞",
    "Uldar Dorm", "–ö–æ—Ñ–µ –≤–µ–Ω–¥–∏–Ω–≥",
    "Kyzdar Dorm", "–ö–∏–æ—Å–∫-1"
]

class SalesStates(StatesGroup):
    branch = State()
    kaspi1 = State()
    kaspi2 = State()
    halyk1 = State()
    halyk2 = State()
    ballom = State()
    sert = State()
    nal = State()
    talon = State()
    confirm = State()

async def check_timeout(message: Message, state: FSMContext):
    data = await state.get_data()
    start_time = data.get("start_time")
    if start_time and (datetime.now().timestamp() - start_time > 600):  # 10 –º–∏–Ω—É—Ç
        await state.clear()
        await message.answer("‚è∞ –£–∞“õ—ã—Ç ”©—Ç—ñ–ø –∫–µ—Ç—Ç—ñ. –ë”ô—Ä—ñ–Ω “õ–∞–π—Ç–∞–¥–∞–Ω –±–∞—Å—Ç–∞–π–º—ã–∑.\n“ö–∞–π –±”©–ª—ñ–º—à–µ—Å—ñ–∑?", reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=branches[i]), KeyboardButton(text=branches[i + 1])] for i in range(0, len(branches), 2)],
            resize_keyboard=True
        ))
        await state.set_state(SalesStates.branch)
        return False
    return True

@dp.message(commands=["start"])
async def start(message: Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=branches[i]), KeyboardButton(text=branches[i + 1])] for i in range(0, len(branches), 2)],
        resize_keyboard=True
    )
    await message.answer("“ö–∞–π –±”©–ª—ñ–º—à–µ—Å—ñ–∑?", reply_markup=keyboard)
    await state.set_state(SalesStates.branch)

@dp.message(SalesStates.branch)
async def set_branch(message: Message, state: FSMContext):
    if message.text not in branches:
        await message.answer("–ö–Ω–æ–ø–∫–∞–¥–∞–Ω —Ç–∞“£–¥–∞“£—ã–∑.")
        return
    await state.update_data(branch=message.text, start_time=datetime.now().timestamp())
    await message.answer("Kaspi Pay-1 —Å–æ–º–∞—Å—ã–Ω –∂–∞–∑—ã“£—ã–∑:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SalesStates.kaspi1)

async def ask_next(message: Message, state: FSMContext, field: str, next_state: State, prompt: str):
    if not await check_timeout(message, state):
        return
    if not message.text.isdigit():
        await message.answer("–¢–µ–∫ —Å–∞–Ω–¥–∞—Ä–º–µ–Ω –∂–∞–∑—ã“£—ã–∑:")
        return
    await state.update_data(**{field: int(message.text)})
    await message.answer(prompt)
    await state.set_state(next_state)

@dp.message(SalesStates.kaspi1)
async def kaspi1(message: Message, state: FSMContext):
    await ask_next(message, state, "kaspi1", SalesStates.kaspi2, "Kaspi Pay-2 —Å–æ–º–∞—Å—ã:")

@dp.message(SalesStates.kaspi2)
async def kaspi2(message: Message, state: FSMContext):
    await ask_next(message, state, "kaspi2", SalesStates.halyk1, "Halyk-1 —Å–æ–º–∞—Å—ã:")

@dp.message(SalesStates.halyk1)
async def halyk1(message: Message, state: FSMContext):
    await ask_next(message, state, "halyk1", SalesStates.halyk2, "Halyk-2 —Å–æ–º–∞—Å—ã:")

@dp.message(SalesStates.halyk2)
async def halyk2(message: Message, state: FSMContext):
    await ask_next(message, state, "halyk2", SalesStates.ballom, "–ë–∞–ª–ª–æ–º —Å–æ–º–∞—Å—ã:")

@dp.message(SalesStates.ballom)
async def ballom(message: Message, state: FSMContext):
    await ask_next(message, state, "ballom", SalesStates.sert, "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–º–∞—Å—ã:")

@dp.message(SalesStates.sert)
async def sert(message: Message, state: FSMContext):
    await ask_next(message, state, "sert", SalesStates.nal, "–ù–∞–ª–∏—á–∫–∞ —Å–æ–º–∞—Å—ã:")

@dp.message(SalesStates.nal)
async def nal(message: Message, state: FSMContext):
    await ask_next(message, state, "nal", SalesStates.talon, "–¢–∞–ª–æ–Ω —Å–æ–º–∞—Å—ã:")

@dp.message(SalesStates.talon)
async def talon(message: Message, state: FSMContext):
    if not await check_timeout(message, state):
        return
    if not message.text.isdigit():
        await message.answer("–°–∞–Ω–¥—ã –¥“±—Ä—ã—Å –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
        return
    await state.update_data(talon=int(message.text))
    data = await state.get_data()
    total = sum([data[key] for key in ["kaspi1", "kaspi2", "halyk1", "halyk2", "ballom", "sert", "nal", "talon"]])
    await state.update_data(total=total)
    date_str = datetime.today().strftime("%d.%m.%Y")
    result = (
        f"üìÖ –ö“Ø–Ω—ñ: {date_str}\n"
        f"üè¢ –ë”©–ª—ñ–º—à–µ: {data['branch']}\n\n"
        f"Kaspi Pay-1: {data['kaspi1']}\n"
        f"Kaspi Pay-2: {data['kaspi2']}\n"
        f"Halyk-1: {data['halyk1']}\n"
        f"Halyk-2: {data['halyk2']}\n"
        f"–ë–∞–ª–ª–æ–º: {data['ballom']}\n"
        f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {data['sert']}\n"
        f"–ù–∞–ª–∏—á–∫–∞: {data['nal']}\n"
        f"–¢–∞–ª–æ–Ω: {data['talon']}\n\n"
        f"üí∞ –ñ–∞–ª–ø—ã: {total}"
    )
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚úÖ –†–∞—Å—Ç–∞–π–º—ã–Ω"), KeyboardButton(text="üîÅ “ö–∞–π—Ç–∞ –∂–∞–∑–∞–º—ã–Ω")]],
        resize_keyboard=True
    )
    await message.answer(result, reply_markup=keyboard)
    await state.set_state(SalesStates.confirm)

@dp.message(SalesStates.confirm)
async def confirm(message: Message, state: FSMContext):
    if message.text == "‚úÖ –†–∞—Å—Ç–∞–π–º—ã–Ω":
        await message.answer("‚úÖ –ú”ô–ª—ñ–º–µ—Ç —Å–∞“õ—Ç–∞–ª–¥—ã! (–∫–µ–π—ñ–Ω Google Sheets-–∫–µ –∂–∞–∑—ã–ª–∞–¥—ã)", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    elif message.text == "üîÅ “ö–∞–π—Ç–∞ –∂–∞–∑–∞–º—ã–Ω":
        await message.answer("–ë”ô—Ä—ñ–Ω “õ–∞–π—Ç–∞ –±–∞—Å—Ç–∞–π–º—ã–∑. /start –±–∞—Å—ã“£—ã–∑", reply_markup=ReplyKeyboardRemove())
        await state.clear()
    else:
        await message.answer("‚úÖ –Ω–µ–º–µ—Å–µ üîÅ –∫–Ω–æ–ø–∫–∞–ª–∞—Ä—ã–Ω —Ç–∞“£–¥–∞“£—ã–∑")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
