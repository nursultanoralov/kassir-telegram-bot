import asyncio
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from dotenv import load_dotenv
from sheets import save_to_sheet
from datetime import datetime

load_dotenv()

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"), default=Bot.Default(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

ADMIN_ID = 425438049
TIMEOUT_MINUTES = 10

class Form(StatesGroup):
    branch = State()
    values = State()

branches = [
    "–ú–∞—Ä–∫–µ—Ç", "–ö–∞–Ω—Ç–∏–Ω —Ü–µ–Ω—Ç—Ä", "–ö–∞–Ω—Ç–∏–Ω H –±–ª–æ–∫", "–ö–∞–Ω—Ç–∏–Ω –°–ø–æ—Ä—Ç",
    "Uldar Dorm", "Kyzdar Dorm", "Doner House", "Red Coffee",
    "–ë–µ–ª–∫–∞", "–ö–∞–Ω—Ç–∏–Ω –†–∞–∑–¥–∞—á–∞", "–ö–æ—Ñ–µ –≤–µ–Ω–¥–∏–Ω–≥", "–ö–∏–æ—Å–∫-1"
]

fields = [
    "Kaspi Pay1", "Kaspi Pay2", "Halyk bank1", "Halyk bank2",
    "–¢–∞–ª–æ–Ω", "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "–ù–∞–ª–∏—á–∫–∞", "–ì–æ—Å—Ç–∏", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"
]

def get_main_keyboard():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(branch)] for branch in branches
    ], resize_keyboard=True)

def get_confirm_keyboard():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton("‚úÖ –†–∞—Å—Ç–∞–π–º—ã–Ω")],
        [KeyboardButton("üîÅ “ö–∞–π—Ç–∞ –µ–Ω–≥—ñ–∑—É")]
    ], resize_keyboard=True)

@dp.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(Form.branch)
    await message.answer("–ë”©–ª—ñ–º—à–µ–Ω—ñ —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=get_main_keyboard())

@dp.message(Form.branch)
async def branch_chosen(message: Message, state: FSMContext):
    if message.text not in branches:
        await message.answer("–ö–µ–ª–µ—Å—ñ —Ç—ñ–∑—ñ–º–Ω–µ–Ω –±”©–ª—ñ–º—à–µ–Ω—ñ —Ç–∞“£–¥–∞“£—ã–∑.")
        return
    await state.update_data(branch=message.text, values={})
    await state.set_state(Form.values)
    await ask_next_field(message, state)

async def ask_next_field(message: Message, state: FSMContext):
    data = await state.get_data()
    values = data["values"]
    for field in fields:
        if field not in values:
            await message.answer(f"{field} —Å–æ–º–∞—Å—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–º—ã—Å–∞–ª—ã: 12000):")
            return
    total = sum(int(values.get(field, 0)) for field in fields)
    formatted_values = "\n".join([
        f"{field}: <b>{format(int(values.get(field, 0)), ',').replace(',', ' ')}</b> —Ç–≥" if field in ["–ù–∞–ª–∏—á–∫–∞"] else
        f"{field}: {format(int(values.get(field, 0)), ',').replace(',', ' ')} —Ç–≥"
        for field in fields
    ])
    formatted_total = f"<b>–ñ–∞–ª–ø—ã: {format(total, ',').replace(',', ' ')} —Ç–≥</b>"

    await message.answer(
        f"<b>–ö—ñ—Ä—ñ—Å –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ:</b>\n\n{formatted_values}\n\n{formatted_total}",
        reply_markup=get_confirm_keyboard()
    )

@dp.message(Form.values)
async def process_field(message: Message, state: FSMContext):
    data = await state.get_data()
    values = data["values"]
    current_field = None
    for field in fields:
        if field not in values:
            current_field = field
            break
    if not current_field:
        await message.answer("–ë”ô—Ä—ñ –µ–Ω–≥—ñ–∑—ñ–ª–≥–µ–Ω.")
        return

    if not message.text.replace(" ", "").isdigit():
        await message.answer("–°–∞–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
        return

    values[current_field] = int(message.text.replace(" ", ""))
    await state.update_data(values=values)
    await ask_next_field(message, state)

@dp.message(F.text == "‚úÖ –†–∞—Å—Ç–∞–π–º—ã–Ω")
async def confirm_data(message: Message, state: FSMContext):
    data = await state.get_data()
    branch = data["branch"]
    values = data["values"]
    total = sum(int(values.get(field, 0)) for field in fields)

    await message.answer("Google Sheets –∫–µ—Å—Ç–µ—Å—ñ–Ω–µ –µ–Ω–≥—ñ–∑—ñ–ª—É–¥–µ...")
    save_to_sheet(branch, message.from_user.full_name, message.from_user.id, values, total)
    await message.answer("‚úÖ –ï–Ω–≥—ñ–∑—ñ–ª–¥—ñ. /start –∫–æ–º–∞–Ω–¥–∞—Å—ã –∞—Ä“õ—ã–ª—ã “õ–∞–π—Ç–∞ –±–∞—Å—Ç–∞—É“ì–∞ –±–æ–ª–∞–¥—ã.")
    await state.clear()

@dp.message(F.text == "üîÅ “ö–∞–π—Ç–∞ –µ–Ω–≥—ñ–∑—É")
async def retry_input(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("“ö–∞–π—Ç–∞ –±–∞—Å—Ç–∞–ª–¥—ã. –ë”©–ª—ñ–º—à–µ–Ω—ñ —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=get_main_keyboard())
    await state.set_state(Form.branch)

@dp.message(F.text == "/help")
async def help_handler(message: Message, state: FSMContext):
    await message.answer("üõ† –ö”©–º–µ–∫ –∞–ª—É “Ø—à—ñ–Ω /start –¥–µ–ø –∂–∞–∑—ã“£—ã–∑.\n–ú”ô–∑—ñ—Ä–¥–µ–Ω –±”©–ª—ñ–º—à–µ–Ω—ñ —Ç–∞“£–¥–∞–ø, —Å–æ–º–∞–ª–∞—Ä–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.")

@dp.message(F.text == "/admin")
async def admin_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–°—ñ–∑–¥–µ —Ä“±“õ—Å–∞—Ç –∂–æ“õ.")
        return
    await message.answer(f"Admin –ø–∞–Ω–µ–ª—ñ\n\nID: <code>{message.from_user.id}</code>\n–ê—Ç—ã: {message.from_user.full_name}")

@dp.message(F.text == "/restart")
async def restart_handler(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("“ö–∞–π—Ç–∞–¥–∞–Ω –±–∞—Å—Ç–∞–ª–¥—ã. –ë”©–ª—ñ–º—à–µ–Ω—ñ —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=get_main_keyboard())
    await state.set_state(Form.branch)

async def clear_old_sessions():
    while True:
        await asyncio.sleep(60)
        now = datetime.now()
        # –ú“±–Ω–¥–∞ 10 –º–∏–Ω—É—Ç ”©—Ç–∫–µ–Ω —Å–µ—Å—Å–∏—è–ª–∞—Ä–¥—ã FSMContext –∞—Ä“õ—ã–ª—ã —Ç–∞–∑–∞–ª–∞—É“ì–∞ –±–æ–ª–∞–¥—ã –µ–≥–µ—Ä —Å–∞“õ—Ç–∞–ª—Å–∞

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
