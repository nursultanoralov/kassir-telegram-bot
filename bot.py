import os
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

from sheets import save_to_sheet
from access_control import is_allowed, add_user
from temp_storage import add_temp_entry, get_temp_entry, remove_temp_entry

load_dotenv()

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())

ADMIN_ID = int(os.getenv("ADMIN_ID", 425438049))

FIELDS = [
    "Kaspi Pay-1", "Kaspi Pay-2", "Halyk-1", "Halyk-2",
    "–ë–∞–ª–ª–æ–º", "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "–ù–∞–ª–∏—á–∫–∞", "–¢–∞–ª–æ–Ω", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"
]

BRANCHES = [
    "–ú–∞—Ä–∫–µ—Ç", "–ö–∞–Ω—Ç–∏–Ω —Ü–µ–Ω—Ç—Ä", "–ö–∞–Ω—Ç–∏–Ω H –±–ª–æ–∫", "–ö–∞–Ω—Ç–∏–Ω –°–ø–æ—Ä—Ç",
    "Uldar Dorm", "Kyzdar Dorm", "Doner House", "Red Coffee",
    "–ë–µ–ª–∫–∞", "–ö–∞–Ω—Ç–∏–Ω –†–∞–∑–¥–∞—á–∞", "–ö–æ—Ñ–µ –≤–µ–Ω–¥–∏–Ω–≥", "–ö–∏–æ—Å–∫-1"
]


class ReportState(StatesGroup):
    choosing_branch = State()
    filling_values = State()


@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.full_name

    # ”ò—Ä“õ–∞—à–∞–Ω –∞–¥–º–∏–Ω–≥–µ /restart “õ“±“õ—ã“ì—ã –±–∞—Ä
    if user_id != ADMIN_ID and not is_allowed(user_id):
        text = (
            f"üö´ –ñ–∞“£–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã —Ä“±“õ—Å–∞—Ç —Å“±—Ä–∞–¥—ã:\n"
            f"{username} (ID: {user_id})\n"
            f"–†“±“õ—Å–∞—Ç –±–µ—Ä—É “Ø—à—ñ–Ω /approve_{user_id} –Ω–µ–º–µ—Å–µ /reject_{user_id} –¥–µ–ø –∂–∞–∑—ã“£—ã–∑."
        )
        await bot.send_message(chat_id=ADMIN_ID, text=text)
        return await message.answer("‚è≥ –°—ñ–∑–≥–µ —Ä“±“õ—Å–∞—Ç –±–µ—Ä—ñ–ª–º–µ–≥–µ–Ω. –ê–¥–º–∏–Ω —Ä“±“õ—Å–∞—Ç –±–µ—Ä—É—ñ –∫–µ—Ä–µ–∫.")

    await state.clear()
    kb = InlineKeyboardBuilder()
    for branch in BRANCHES:
        kb.button(text=branch, callback_data=branch)
    kb.adjust(2)
    await message.answer("üìç “ö–∞–π –±”©–ª—ñ–º—à–µ–Ω—ñ“£ –µ—Å–µ–±—ñ–Ω —Ç–æ–ª—Ç—ã—Ä–∞—Å—ã–∑?", reply_markup=kb.as_markup())
    await state.set_state(ReportState.choosing_branch)


@dp.callback_query(ReportState.choosing_branch)
async def branch_chosen(call: CallbackQuery, state: FSMContext):
    await state.update_data(branch=call.data, values={}, current_field=0)
    await call.message.answer(f"‚úçÔ∏è {call.data} –±”©–ª—ñ–º—à–µ—Å—ñ —Ç–∞“£–¥–∞–ª–¥—ã.\n\n{FIELDS[0]} —Å–æ–º–∞—Å—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    await state.set_state(ReportState.filling_values)


@dp.message(ReportState.filling_values)
async def fill_value(message: Message, state: FSMContext):
    data = await state.get_data()
    index = data["current_field"]
    field = FIELDS[index]

    try:
        value = int(message.text.replace(" ", "").replace("—Ç–≥", ""))
    except ValueError:
        return await message.answer("‚ùå –¢–µ–∫ —Å–∞–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–º—ã—Å–∞–ª—ã: 12000)")

    values = data.get("values", {})
    values[field] = value
    await state.update_data(values=values)

    if index + 1 < len(FIELDS):
        next_field = FIELDS[index + 1]
        await state.update_data(current_field=index + 1)
        await message.answer(f"{next_field} —Å–æ–º–∞—Å—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    else:
        def fmt(val): return f"{val:,}".replace(",", " ") + "—Ç–≥"
        total = sum(values.values())
        cash_fmt = fmt(values.get("–ù–∞–ª–∏—á–∫–∞", 0))
        total_fmt = fmt(total)

        text = "\n".join(f"{k}: {fmt(v)}" for k, v in values.items())
        confirm_text = (
            f"‚úÖ –ë–∞—Ä–ª—ã“ì—ã –µ–Ω–≥—ñ–∑—ñ–ª–¥—ñ:\n\n{text}\n\n"
            f"üíµ –ù–∞–ª–∏—á–∫–∞: *{cash_fmt}*\nüìä –ñ–∞–ª–ø—ã: *{total_fmt}*"
        )

        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –†–∞—Å—Ç–∞–π–º—ã–Ω", callback_data="confirm")
        kb.button(text="üîÅ “ö–∞–π—Ç–∞ —Ç–æ–ª—Ç—ã—Ä–∞–º—ã–Ω", callback_data="restart")
        kb.adjust(2)

        await message.answer(confirm_text, parse_mode="Markdown", reply_markup=kb.as_markup())


@dp.callback_query(F.data == "restart")
async def restart(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer("üîÅ “ö–∞–π—Ç–∞ –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω /start –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –∂–∞–∑—ã“£—ã–∑.")


@dp.callback_query(F.data == "confirm")
async def confirm(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data:
        return await call.message.answer("“ö–∞—Ç–µ: –ú–µ–º–ª–µ–∫–µ—Ç –∫“Ø–π—ñ –±–æ—Å.")

    branch = data["branch"]
    values = data["values"]
    username = call.from_user.full_name
    user_id = call.from_user.id

    entry = {
        "branch": branch,
        "values": values,
        "username": username,
        "user_id": user_id
    }

    if user_id == ADMIN_ID or is_allowed(user_id):
        save_to_sheet(branch, username, user_id, values)
        await call.message.answer("‚úÖ –ï—Å–µ–ø “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! –†–∞“õ–º–µ—Ç.")
    else:
        add_temp_entry(user_id, entry)
        kb = InlineKeyboardBuilder()
        kb.button(text=f"‚úÖ –†“±“õ—Å–∞—Ç –±–µ—Ä–µ–º—ñ–Ω", callback_data=f"approve_{user_id}")
        kb.button(text=f"‚ùå “ö–∞–π—Ç–∞—Ä—É", callback_data=f"reject_{user_id}")
        kb.adjust(2)

        await bot.send_message(
            chat_id=ADMIN_ID,
            text=(
                f"üì• –ñ–∞“£–∞ “õ–æ–ª–¥–∞–Ω—É—à—ã –µ—Å–µ–ø –∂—ñ–±–µ—Ä–¥—ñ (–∫“Ø—Ç—ñ–ø —Ç“±—Ä):\n"
                f"{username} (ID: {user_id})"
            ),
            reply_markup=kb.as_markup()
        )
        await call.message.answer("‚è≥ –ï—Å–µ–±—ñ“£—ñ–∑ –∞–¥–º–∏–Ω–≥–µ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ. –†“±“õ—Å–∞—Ç –∫“Ø—Ç—ñ“£—ñ–∑.")

    await state.clear()


@dp.message(F.text.regexp(r"^/approve_(\d+)$"))
async def approve_by_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    user_id = int(message.text.split("_")[1])
    await handle_approval(user_id, approve=True, message=message)


@dp.message(F.text.regexp(r"^/reject_(\d+)$"))
async def reject_by_command(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    user_id = int(message.text.split("_")[1])
    await handle_approval(user_id, approve=False, message=message)


@dp.callback_query(F.data.regexp(r"^(approve|reject)_(\d+)$"))
async def handle_callback_approval(call: CallbackQuery):
    action, user_id = call.data.split("_")
    await handle_approval(int(user_id), approve=(action == "approve"), message=call.message)


async def handle_approval(user_id: int, approve: bool, message: Message | CallbackQuery):
    entry = get_temp_entry(user_id)
    if not entry:
        return await message.answer("‚ùå –ë“±–ª “õ–æ–ª–¥–∞–Ω—É—à—ã “Ø—à—ñ–Ω –µ—Å–µ–ø —Ç–∞–±—ã–ª–º–∞–¥—ã.")

    if approve:
        add_user(user_id)
        save_to_sheet(entry["branch"], entry["username"], entry["user_id"], entry["values"])
        await bot.send_message(chat_id=user_id, text="‚úÖ –ï—Å–µ–±—ñ“£—ñ–∑ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! –°—ñ–∑–≥–µ —Ä“±“õ—Å–∞—Ç –±–µ—Ä—ñ–ª–¥—ñ.")
        await message.answer(f"‚úÖ “ö–æ–ª–¥–∞–Ω—É—à—ã {entry['username']} (ID: {user_id}) —Ä“±“õ—Å–∞—Ç –∞–ª—ã–ø, –µ—Å–µ–±—ñ —Å–∞“õ—Ç–∞–ª–¥—ã.")
    else:
        await bot.send_message(chat_id=user_id, text="‚ùå –°—ñ–∑–¥—ñ“£ –µ—Å–µ–±—ñ“£—ñ–∑ “õ–∞–±—ã–ª–¥–∞–Ω–±–∞–¥—ã. “ö–æ—Å—ã–º—à–∞ –∞“õ–ø–∞—Ä–∞—Ç “õ–∞–∂–µ—Ç.")
        await message.answer(f"üö´ “ö–æ–ª–¥–∞–Ω—É—à—ã {entry['username']} (ID: {user_id}) —Ä“±“õ—Å–∞—Ç –±–µ—Ä—ñ–ª–º–µ–¥—ñ.")

    remove_temp_entry(user_id)


if __name__ == "__main__":
    dp.run_polling(bot)
