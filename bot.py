import os
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()

# –¢–æ–∫–µ–Ω–¥—ñ –æ“õ—É
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_IDS = [425438049]

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# --- –°“±—Ö–±–∞—Ç—Ç—ã —Å–∞“õ—Ç–∞—É ---
user_sessions = {}

# --- FSM –∫“Ø–π—ñ ---
class SaleState(StatesGroup):
    choosing_branch = State()
    entering_data = State()
    confirm = State()


# --- –°—Ç–∞—Ä—Ç ---
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–∞—Ç—É –æ—Ä–Ω—ã“£—ã–∑–¥—ã —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=branch_keyboard())
    await state.set_state(SaleState.choosing_branch)

# --- –§–∏–ª–∏–∞–ª —Ç–∞“£–¥–∞—É ---
@dp.message(SaleState.choosing_branch)
async def choose_branch(message: Message, state: FSMContext):
    branch = message.text.strip()
    await state.update_data(branch=branch, values={})
    await message.answer("–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å–∞—Ç—ã–ª—ã–º–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:\n\n<b>Kaspi Pay-1:</b>")
    await state.set_state(SaleState.entering_data)


# --- –î–µ—Ä–µ–∫—Ç–µ—Ä–¥—ñ –∂–∏–Ω–∞—É ---
FIELDS = [
    "Kaspi Pay-1", "Kaspi Pay-2", "Halyk-1", "Halyk-2",
    "–ë–∞–ª–ª–æ–º", "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "–ù–∞–ª–∏—á–∫–∞", "–¢–∞–ª–æ–Ω"
]

@dp.message(SaleState.entering_data)
async def enter_data(message: Message, state: FSMContext):
    data = await state.get_data()
    values = data.get("values", {})
    field_index = len(values)

    try:
        values[FIELDS[field_index]] = float(message.text)
    except ValueError:
        await message.answer("–°–∞–Ω–º–µ–Ω –∂–∞–∑—ã“£—ã–∑:")
        return

    await state.update_data(values=values)

    if field_index + 1 < len(FIELDS):
        await message.answer(f"<b>{FIELDS[field_index + 1]}:</b>")
    else:
        # –§–∞–∫—Ç –≤—ã—Ä—É—á–∫–∞ –µ—Å–µ–ø—Ç–µ—É
        total = sum(values.values())
        await state.update_data(total=total)
        summary = "\n".join([f"{k}: {v}" for k, v in values.items()])
        text = f"<b>–§–∏–ª–∏–∞–ª:</b> {data['branch']}\n\n{summary}\n\n<b>–§–∞–∫—Ç –≤—ã—Ä—É—á–∫–∞:</b> {total}\n\n–†–∞—Å—Ç–∞–π—Å—ã–∑ –±–∞?"
        await message.answer(text, reply_markup=confirm_keyboard())
        await state.set_state(SaleState.confirm)


# --- –†–∞—Å—Ç–∞—É –Ω–µ–º–µ—Å–µ “õ–∞–π—Ç–∞ –µ–Ω–≥—ñ–∑—É ---
@dp.callback_query(SaleState.confirm)
async def confirm_data(call: CallbackQuery, state: FSMContext):
    await call.answer()
    if call.data == "confirm":
        data = await state.get_data()
        username = call.from_user.username or "–∂–æ“õ"
        full_name = call.from_user.full_name
        user_id = call.from_user.id
        date = datetime.now().strftime("%Y-%m-%d")
        total = data["total"]
        values = data["values"]
        branch = data["branch"]

        text = f"‚úÖ <b>–ñ–∞“£–∞ —Å–∞—Ç—ã–ª—ã–º</b>\n\nüìÖ <b>{date}</b>\nüè¢ <b>{branch}</b>\nüë§ <b>{full_name}</b>\nüÜî <code>{user_id}</code>\n\n"
        for k, v in values.items():
            text += f"{k}: {v}\n"
        text += f"\n<b>–§–∞–∫—Ç –≤—ã—Ä—É—á–∫–∞:</b> {total}"

        # –¢–µ–∫ –∞–¥–º–∏–Ω–≥–µ –∂—ñ–±–µ—Ä—É
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, text)

        await call.message.answer("‚úÖ –ê“õ–ø–∞—Ä–∞—Ç —Å–∞“õ—Ç–∞–ª–¥—ã. –†–∞—Ö–º–µ—Ç!")
        await state.clear()
    else:
        await call.message.answer("“ö–∞–π—Ç–∞–¥–∞–Ω –µ–Ω–≥—ñ–∑—É “Ø—à—ñ–Ω /start –±–∞—Å—ã“£—ã–∑.")
        await state.clear()


# --- –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä ---
@dp.message(Command("help"))
async def help_cmd(message: Message):
    await message.answer("üõ† –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä:\n/start ‚Äì “õ–∞–π—Ç–∞ –±–∞—Å—Ç–∞—É\n/admin ‚Äì –∞–¥–º–∏–Ω –±”©–ª—ñ–º—ñ\n/restart ‚Äì “õ–∞–π—Ç–∞ –±–∞—Å—Ç–∞—É")


@dp.message(Command("restart"))
async def restart_cmd(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("üîÑ “ö–∞–π—Ç–∞–¥–∞–Ω –±–∞—Å—Ç–∞–π—ã“õ.\n–§–∏–ª–∏–∞–ª —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=branch_keyboard())
    await state.set_state(SaleState.choosing_branch)


@dp.message(Command("admin"))
async def admin_cmd(message: Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("üë§ –°—ñ–∑ –∞–¥–º–∏–Ω—Å—ñ–∑.")
    else:
        await message.answer("üö´ –ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ –∞–¥–º–∏–Ω–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.")

@dp.message(Command("today"))
async def today_cmd(message: Message):
    if message.from_user.id in ADMIN_IDS:
        date = datetime.now().strftime("%d-%m-%Y")  # –∫“Ø–Ω-–∞–π-–∂—ã–ª
        await message.answer(f"üìÖ –ë“Ø–≥—ñ–Ω–≥—ñ –∫“Ø–Ω: {date}")
    else:
        await message.answer("üö´ –ë“±–ª –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫ –∞–¥–º–∏–Ω–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.")

@dp.message(Command("id"))
async def id_cmd(message: Message):
    await message.answer(f"üÜî –°—ñ–∑–¥—ñ“£ ID: <code>{message.from_user.id}</code>")


# --- –ö–Ω–æ–ø–∫–∞–ª–∞—Ä ---
def branch_keyboard():
    kb = ReplyKeyboardBuilder()
    branches = [
        "–ú–∞—Ä–∫–µ—Ç", "–ö–∞–Ω—Ç–∏–Ω —Ü–µ–Ω—Ç—Ä", "–ö–∞–Ω—Ç–∏–Ω H –±–ª–æ–∫",
        "–ö–∞–Ω—Ç–∏–Ω –°–ø–æ—Ä—Ç", "Uldar Dorm", "Kyzdar Dorm",
        "Doner House", "Red Coffee", "–ë–µ–ª–∫–∞",
        "–ö–∞–Ω—Ç–∏–Ω –†–∞–∑–¥–∞—á–∞", "–ö–æ—Ñ–µ –≤–µ–Ω–¥–∏–Ω–≥", "–ö–∏–æ—Å–∫-1"
    ]
    for i in range(0, len(branches), 2):
        kb.row(
            types.KeyboardButton(text=branches[i]),
            types.KeyboardButton(text=branches[i+1]) if i+1 < len(branches) else None
        )
    return kb.as_markup(resize_keyboard=True, one_time_keyboard=True)


def confirm_keyboard():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –†–∞—Å—Ç–∞–π–º—ã–Ω", callback_data="confirm")
    kb.button(text="üîÑ “ö–∞–π—Ç–∞ –∂–∞–∑–∞–º—ã–Ω", callback_data="edit")
    return kb.as_markup()


# --- –ë–∞—Å—Ç–∞—É ---
async def main():
    print("–ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
