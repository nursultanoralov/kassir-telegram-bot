import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
from datetime import datetime
from sheets import save_to_sheet

load_dotenv()
bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN"))
dp = Dispatcher(storage=MemoryStorage())

# –ü–∞—Ä–∞–º–µ—Ç—Ä–ª–µ—Ä
FIELDS = [
    "Kaspi Pay1", "Kaspi Pay2", "Halyk bank1", "Halyk bank2",
    "–¢–∞–ª–æ–Ω", "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", "–ù–∞–ª–∏—á–∫–∞", "–ì–æ—Å—Ç–∏", "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"
]

BRANCHES = [
    "–ú–∞—Ä–∫–µ—Ç", "–ö–∞–Ω—Ç–∏–Ω —Ü–µ–Ω—Ç—Ä", "–ö–∞–Ω—Ç–∏–Ω H –±–ª–æ–∫", "–ö–∞–Ω—Ç–∏–Ω –°–ø–æ—Ä—Ç",
    "Uldar Dorm", "Kyzdar Dorm", "Doner House", "Red Coffee",
    "–ë–µ–ª–∫–∞", "–ö–∞–Ω—Ç–∏–Ω –†–∞–∑–¥–∞—á–∞", "–ö–æ—Ñ–µ –≤–µ–Ω–¥–∏–Ω–≥", "–ö–∏–æ—Å–∫-1"
]

class ReportState(StatesGroup):
    choosing_branch: State = State()
    filling_values: State = State()

@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    await state.clear()
    kb = InlineKeyboardBuilder()
    for branch in BRANCHES:
        kb.button(text=branch, callback_data=branch)
    kb.adjust(2)
    await message.answer("üìç “ö–∞–π –±”©–ª—ñ–º—à–µ–Ω—ñ“£ –µ—Å–µ–±—ñ–Ω —Ç–æ–ª—Ç—ã—Ä–∞—Å—ã–∑?", reply_markup=kb.as_markup())
    await state.set_state(ReportState.choosing_branch)

@dp.callback_query(ReportState.choosing_branch)
async def branch_chosen(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.update_data(branch=call.data, values={})
    await state.update_data(current_field=0)
    await call.message.answer(f"‚úçÔ∏è {call.data} –±”©–ª—ñ–º—à–µ—Å—ñ —Ç–∞“£–¥–∞–ª–¥—ã.\n\n{FIELDS[0]} —Å–æ–º–∞—Å—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    await state.set_state(ReportState.filling_values)

@dp.message(ReportState.filling_values)
async def fill_value(message: Message, state: FSMContext):
    data = await state.get_data()
    index = data["current_field"]
    field = FIELDS[index]

    try:
        value = int(message.text.replace(" ", "").replace("—Ç–≥", ""))
    except ValueError:
        return await message.answer("‚ùå –¢–µ–∫ —Å–∞–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–º—ã—Å–∞–ª—ã: 12000)")

    values = data.get("values", {})
    values[field] = value
    await state.update_data(values=values)

    if index + 1 < len(FIELDS):
        next_field = FIELDS[index + 1]
        await state.update_data(current_field=index + 1)
        await message.answer(f"{next_field} —Å–æ–º–∞—Å—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    else:
        total = sum(values.values())

        def fmt(val): return f"{val:,}".replace(",", " ")
        cash_fmt = fmt(values.get("–ù–∞–ª–∏—á–∫–∞", 0))
        total_fmt = fmt(total)

        text = "\n".join(f"{k}: {fmt(v)}" for k, v in values.items())
        confirm_text = (
            f"‚úÖ –ë–∞—Ä–ª—ã“õ –º”ô–Ω –µ–Ω–≥—ñ–∑—ñ–ª–¥—ñ:\n\n{text}\n\n"
            f"üíµ –ù–∞–ª–∏—á–∫–∞: *{cash_fmt}*\nüìä –ñ–∞–ª–ø—ã: *{total_fmt}*"
        )

        kb = InlineKeyboardBuilder()
        kb.button(text="‚úÖ –†–∞—Å—Ç–∞–π–º—ã–Ω", callback_data="confirm")
        kb.button(text="üîÅ “ö–∞–π—Ç–∞ —Ç–æ–ª—Ç—ã—Ä–∞–º—ã–Ω", callback_data="restart")
        kb.adjust(2)

        await message.answer(confirm_text, parse_mode="Markdown", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "restart")
async def restart(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await state.clear()
    await call.message.answer("üîÅ “ö–∞–π—Ç–∞ –±–∞—Å—Ç–∞—É “Ø—à—ñ–Ω /start –¥–µ–ø –∂–∞–∑—ã“£—ã–∑.")

@dp.callback_query(F.data == "confirm")
async def confirm(call: CallbackQuery, state: FSMContext):
    await call.answer()
    data = await state.get_data()
    branch = data["branch"]
    values = data["values"]
    full_name = call.from_user.full_name
    user_id = call.from_user.id
    total = sum(values.values())

    # Google Sheets-–∫–µ —Å–∞“õ—Ç–∞—É
    save_to_sheet(branch, full_name, user_id, values, total)

    await call.message.answer("‚úÖ –ï—Å–µ–ø “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã! –†–∞“õ–º–µ—Ç.")
    await state.clear()

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
